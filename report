public List<User> getPromoterListByTeam(String teamId) {
        String sql = "SELECT user_id,user_name FROM user_master WHERE user_type in (4,6) " + 
            (teamId.isEmpty() ? "" : "AND parent_user_id = ? ") + 
            "order by user_name";

        List<User> promoterList;

        if (teamId.isEmpty()) {
            promoterList = jdbcTemplate.query(sql, (ResultSet rs) -> {
                List<User> list = new ArrayList<>();
                while (rs.next()) {
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUserName(rs.getString("user_name"));
                    list.add(user);
                }
                return list;
            });
        } else {
            promoterList = jdbcTemplate.query(sql, new Object[]{teamId}, (ResultSet rs) -> {
                List<User> list = new ArrayList<>();
                while (rs.next()) {
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUserName(rs.getString("user_name"));
                    list.add(user);
                }
                return list;
            });
        }
        return promoterList;
    }
}
public Map<String, String> getCongVals() {
    String sql = "SELECT config_name, config_value FROM configdata";
    Map<String, String> configMap = new HashMap<>();

    try {
        jdbcTemplate.query(sql, rs -> {
            configMap.put(rs.getString(1), rs.getString(2));
        });
    } catch (DataAccessException e) {
        e.printStackTrace();
    }
    return configMap;
}
 public List<CompReportForm> getAttendanceReport(String team, String fromDate, String toDate, String promoterId, Map<String, String> configMap) {
        final int FULL_DAY_MINS = Integer.parseInt(configMap.get("FULL_MANDAY_MINS"));
        final int MINS_89 = Integer.parseInt(configMap.get("0_MANDAY_MINS"));
        final int MINS_179 = Integer.parseInt(configMap.get("1/2_MANDAY_MINS"));
        final int MINS_299 = Integer.parseInt(configMap.get("3/4_MANDAY_MINS"));

        String smsSts = configMap.get("SMS_STATUS");
        String audSts = configMap.get("AUDIT_STATUS");
        String syncCutOffDate = configMap.get("brCutOffDate");

        PreparedStatement stmt = null;
        ResultSet rs = null;
        List<CompReportForm> reportList = new ArrayList<>();

        try {
            String query = "";
            String manday = "";
            String tfn = "";

            if (fromDate != null && !fromDate.equals("")) {
                manday = "(select count(distinct date(tm.track_date)) from h2h_main h inner join track_master tm on tm.TRACK_ID = h.TRACK_ID " +
                        "inner join accompany_call a on h.track_id = a.track_id and date(dataSyncTime) between DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') and DATE_FORMAT(CURDATE(),'%Y-%m-" + syncCutOffDate + "') " +
                        "where h.UserId = hm.UserId and tm.track_date between Date(?) AND Date(?)) as Mandays, ";
                tfn = "ifnull((select count(distinct t.id) from tfn t inner join h2h_teams ht on ht.city_id = t.city and ht.agencyid = t.agency " +
                        "inner join user_master um on um.parent_user_id = ht.team_id inner join h2h_main h on h.userId = um.user_id " +
                        "inner join accompany_call a on h.track_id = a.track_id and date(dataSyncTime) between DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') and DATE_FORMAT(CURDATE(),'%Y-%m-" + syncCutOffDate + "') " +
                        "inner join track_master tm on tm.track_id = h.track_id and tm.track_date = t.toDate " +
                        "inner join qv_audit qsc on tm.track_id = qsc.trackid " +
                        "where promoter = hm.UserId and h.brand!=38 and (qsc.status = 2 or (qsc.status = 3 and improper_img_reason = -1)) " +
                        "and toDate between ? and ? group by t.city, t.toDate, t.agency),0) as tfnDays, ";
                query += " and tm.track_date between Date(?) AND Date(?)";
            } else {
                return reportList;
            }

            if (team != null && !team.equals("-1")) {
                if (promoterId != null && !promoterId.equals("-1")) {
                    query += " and hm.team_id = ? AND hm.UserId = ?";
                } else {
                    query += " and hm.team_id = ?";
                     } else if (promoterId != null && !promoterId.equals("-1")) {
                query += " and hm.UserId = ?";
            }
            query += " GROUP BY um.user_name, tm.track_date ORDER BY  um.user_name ASC , tm.track_date ASC)";
            baseQueryPart1 = baseQueryPart1.replaceAll(":SSts", smsSts);
            baseQueryPart1 = baseQueryPart1.replaceAll(":ASts", audSts);
            baseQueryPart2 = baseQueryPart2.replaceAll(":syncCutOffDate", syncCutOffDate);
            String finalQuery = baseQueryPart1 + manday + tfn + baseQueryPart2 + query + baseQueryPart3 + query + endQueryPart;

            int index = 1;
            if (team != null && !team.equals("-1")) {
                if (promoterId != null && !promoterId.equals("-1")) {
                    stmt.setString(index++, team);
                    stmt.setString(index++, promoterId);
                } else {
                    stmt.setString(index++, team);
                }
            } else if (promoterId != null && !promoterId.equals("-1")) {
                stmt.setString(index++, promoterId);
            }
            stmt.setString(index++, fromDate);
            stmt.setString(index++, toDate);
            stmt.setString(index++, fromDate);
            stmt.setString(index++, toDate);

            System.out.println("Completion Report Start::(" + new SimpleDateFormat("YY-MM-dd HH:mm:ss").format(new Date()) + ")" + stmt);
            rs = stmt.executeQuery();
            System.out.println("Completion Report End::(" + new SimpleDateFormat("YY-MM-dd HH:mm:ss").format(new Date()) + ")");

            while (rs.next()) {
                CompReportForm cr = new CompReportForm();
                cr.setPromFdate(rs.getString("track_id"));
                cr.setDate(rs.getString("TrackDate"));
                cr.setBrand(rs.getString("FieldDataName"));
                cr.setCity(rs.getString("City"));
                cr.setTeam(rs.getString("Team"));
                cr.setPromoterId(rs.getString("Promoter"));

                // Rest of the code remains the same

                reportList.add(cr);
            }

            rs.close();
            // Rest of the code remains the same

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            // Rest of the code remains the same
        }

        return reportList;
    }
}
public int getTFNMandays(float fullOrHalfDay, String trackDate, String promoter) {
    String syncCutOffDate = getSyncCutOffDate();
    int tfnDays = 0;

    String sql = "SELECT COUNT(DISTINCT t.id) FROM tfn t " +
                 "INNER JOIN h2h_teams ht ON ht.city_id = t.city AND ht.agencyid = t.agency " +
                 "INNER JOIN user_master um ON um.parent_user_id = ht.team_id " +
                 "INNER JOIN h2h_main hm ON hm.userId = um.user_id " +
                 "INNER JOIN accompany_call a ON h.track_id = a.track_id AND date(dataSyncTime) BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') AND DATE_FORMAT(CURDATE(),'%Y-%m-"+syncCutOffDate+"') " +
                 "INNER JOIN track_master tm ON hm.track_id = tm.track_id AND tm.track_date = t.toDate " +
                 "INNER JOIN qv_audit qsc ON tm.track_id = qsc.trackid " +
                 "WHERE um.user_name = ? " +
                 "AND hm.brand != 38 AND (qsc.status = 2 OR (qsc.status = 3 AND improper_img_reason = -1)) AND toDate = ? " +
                 "GROUP BY t.city, t.toDate, t.agency";

    try {
        jdbcTemplate.query(sql, preparedStatement -> {
            preparedStatement.setString(1, promoter);
            preparedStatement.setString(2, trackDate);
        }, rs -> {
            if (fullOrHalfDay == 0 || fullOrHalfDay == 0.5) {
                tfnDays = 1;
            }
        });
    } catch (DataAccessException e) {
        e.printStackTrace();
    }

    return tfnDays;
}
public String getSyncCutOffDate() {
    String cutOffDate = null;
    String sql = "SELECT config_value FROM configdata WHERE config_name = 'brCutOffDate'";

    try {
        cutOffDate = jdbcTemplate.queryForObject(sql, String.class);
    } catch (DataAccessException e) {
        e.printStackTrace();
    }

    return cutOffDate;
}
public CompBreakdown getResultApp(String trackDate, int userId, String syncCutOffDate) {
    CompBreakdown result = null;
    String sql = "SELECT (SELECT reason FROM fnwreason WHERE fnwr_id = hm.bd_id) AS BR, "
        + "(SELECT payable FROM fnwreason WHERE fnwr_id = hm.bd_id) AS brPay, hm.bd_id FROM track_master tm "
        + "INNER JOIN h2h_main hm ON tm.track_id = hm.track_id AND (hm.bd_id > 0 OR hm.training_id > 0) "
        + "INNER JOIN accompany_call a ON h.track_id = a.track_id AND DATE(dataSyncTime) BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') AND DATE_FORMAT(CURDATE(),'%Y-%m-"
        + syncCutOffDate + "') " 
        + "WHERE hm.User_Type IN (4,6) AND brand = 38 AND tm.track_date = ? "
        + "AND hm.userId = ? AND hm.ag_audit = 1 AND hm.app_audit = 1 AND hm.bus_audit = 1";

    try {
        List<CompBreakdown> results = jdbcTemplate.query(sql, new Object[]{trackDate, userId}, (rs, rowNum) -> {
            CompBreakdown compBreakdown = new CompBreakdown();
            compBreakdown.setbReason(rs.getString("BR"));
            compBreakdown.setBrPay(rs.getString("brPay"));
            compBreakdown.setBdId(rs.getInt("bd_id"));
            compBreakdown.setBrAudStatus("Approved");
            return compBreakdown;
        });

        if (!results.isEmpty()) {
            result = results.get(0);
        }
    } catch (DataAccessException e) {
        e.printStackTrace();
    }

    return result;
}
public CompBreakdown getResultReject(String trackDate, int userId, String syncCutOffDate) {
    CompBreakdown result = null;
    String sql = "SELECT (SELECT reason FROM fnwreason WHERE fnwr_id = hm.bd_id) AS BR, "
        + "(SELECT payable FROM fnwreason WHERE fnwr_id = hm.bd_id) AS brPay, hm.bd_id FROM track_master tm "
        + "INNER JOIN h2h_main hm ON tm.track_id = hm.track_id AND (hm.bd_id > 0 OR hm.training_id > 0) "
        + "INNER JOIN accompany_call a ON h.track_id = a.track_id AND DATE(dataSyncTime) BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') AND DATE_FORMAT(CURDATE(),'%Y-%m-"
        + syncCutOffDate + "') " 
        + "WHERE hm.User_Type IN (4,6) AND brand = 38 AND tm.track_date = ? "
        + "AND hm.userId = ? AND (hm.ag_audit = 0 OR hm.app_audit = 0 OR hm.bus_audit = 0 OR hm.app_audit = 3)";

    try {
        List<CompBreakdown> results = jdbcTemplate.query(sql, new Object[]{trackDate, userId}, (rs, rowNum) -> {
            CompBreakdown compBreakdown = new CompBreakdown();
            compBreakdown.setbReason(rs.getString("BR"));
            compBreakdown.setBrPay(rs.getString("brPay"));
            compBreakdown.setBdId(rs.getInt("bd_id"));
            compBreakdown.setBrAudStatus("Rejected");
            return compBreakdown;
        });

        if (!results.isEmpty()) {
            result = results.get(0);
        }
    } catch (DataAccessException e) {
        e.printStackTrace();
    }

    return result;
}
public CompBreakdown getResultNotAudited(String trackDate, int userId, String syncCutOffDate) {
    CompBreakdown result = null;
    String sql = "SELECT (SELECT reason FROM fnwreason WHERE fnwr_id = hm.bd_id) AS BR, "
        + "(SELECT payable FROM fnwreason WHERE fnwr_id = hm.bd_id) AS brPay, hm.bd_id FROM track_master tm "
        + "INNER JOIN h2h_main hm ON tm.track_id = hm.track_id AND (hm.bd_id > 0 OR hm.training_id > 0) "
        + "INNER JOIN accompany_call a ON h.track_id = a.track_id AND DATE(dataSyncTime) BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH,'%Y-%m-01') AND DATE_FORMAT(CURDATE(),'%Y-%m-"
        + syncCutOffDate + "') " 
        + "WHERE hm.User_Type IN (4,6) AND brand = 38 AND tm.track_date = ? "
        + "AND hm.userId = ? AND (hm.ag_audit IS NULL OR hm.bus_audit IS NULL AND hm.app_audit IN (NULL, 2))";

    try {
        List<CompBreakdown> results = jdbcTemplate.query(sql, new Object[]{trackDate, userId}, (rs, rowNum) -> {
            CompBreakdown compBreakdown = new CompBreakdown();
            compBreakdown.setbReason(rs.getString("BR"));
            compBreakdown.setBrPay(rs.getString("brPay"));
            compBreakdown.setBdId(rs.getInt("bd_id"));
            compBreakdown.setBrAudStatus("Not Audited");
            return compBreakdown;
        });

        if (!results.isEmpty()) {
            result = results.get(0);
        }
    } catch (DataAccessException e) {
        e.printStackTrace();
    }

    return result;
}

@Transactional
    public ArrayList getAttendanceReport(String team, String fromDate, String toDate, String promoterId, Map configMap) {
        // your previous code logic here...
        // ...

        String finalQuery = baseQueryPart1 + manday + tfn + baseQueryPart2 + query + baseQueryPart3 + query + endQueryPart;

        ArrayList reportList = jdbcTemplate.query(finalQuery, preparedStatement -> {
            int index = 1;
            if (team != null && !team.equals("-1")) {
                if (promoterId != null && !promoterId.equals("-1")) {
                    preparedStatement.setString(index++, team);
                    preparedStatement.setString(index++, promoterId);
                } else {
                    preparedStatement.setString(index++, team);
                }
            } else if (promoterId != null && !promoterId.equals("-1")) {
                preparedStatement.setString(index++, promoterId);
            }
            if (team != null && !team.equals("-1")) {
                if (promoterId != null && !promoterId.equals("-1")) {
                    preparedStatement.setString(index++, team);
                    preparedStatement.setString(index++, promoterId);
                } else {
                    preparedStatement.setString(index++, team);
                }
            } else if (promoterId != null && !promoterId.equals("-1")) {
                preparedStatement.setString(index++, promoterId);
            }
        }, resultSet -> {
            // your ResultSetExtractor logic here
            ArrayList localReportList = new ArrayList();
            while (resultSet.next()) {
                // create and add CompReportForm object to list
                // ... your logic here
            }
            // your additional logic outside the loop (for example, getting Func_Deduction)
            // ...

            return localReportList;
        });

        // your remaining code logic here...

        return reportList;
    }
}
public ArrayList getAttendanceReport(String team, String fromDate, String toDate, String promoterId, Map<String, String> configMap) {
    final int FULL_DAY_MINS = Integer.parseInt(configMap.get("FULL_MANDAY_MINS")), 
            MINS_89 = Integer.parseInt(configMap.get("0_MANDAY_MINS")),
            MINS_179 = Integer.parseInt(configMap.get("1/2_MANDAY_MINS")),
            MINS_299 = Integer.parseInt(configMap.get("3/4_MANDAY_MINS"));
    
    // ... your code logic here ...

    // execute the query
    ArrayList<CompReportForm> reportList = jdbcTemplate.query(finalQuery, preparedStatement -> {
        int index = 1;
        // set your prepared statement parameters
        // ...
    }, resultSet -> {
        ArrayList<CompReportForm> localReportList = new ArrayList<>();
        while (resultSet.next()) {
            CompReportForm cr = new CompReportForm();
            // set your CompReportForm properties
            cr.setPromFdate(resultSet.getString("track_id"));
            // ... your logic here to set all properties of CompReportForm ...

            localReportList.add(cr);
        }

        // your additional logic outside the loop (for example, getting Func_Deduction)
        int prevUser = 0, bId = 0, cId = 0;
        for (CompReportForm crf : localReportList) {
            if(crf.getProductiveCalls() > 0){
                if(crf.getBrandId() != bId || crf.getCityId() != cId || crf.getUserId() != prevUser){
                    // Execute the query for Func_Deduction
                    jdbcTemplate.query(Func_Deduction, funcPs -> {
                        funcPs.setInt(1, crf.getUserId());
                        funcPs.setString(2, fromDate);
                        funcPs.setInt(3, crf.getBrandId()); 
                        funcPs.setInt(4, crf.getCityId());
                        funcPs.setInt(5, crf.getAgencyId());
                    }, funcRs -> {
                        while(funcRs.next()){
                            crf.setDeduction(funcRs.getInt("ded"));
                        }
                    });
                    prevUser = crf.getUserId();
                    bId = crf.getBrandId();  
                    cId = crf.getCityId();
                }
            }
        }

        return localReportList;
    });

    // your remaining code logic here...

    return reportList;
}
