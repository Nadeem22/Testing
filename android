 public String smsGenHisDate() {
        String selectQuery = "SELECT event_date FROM sms_history ORDER BY history_id DESC LIMIT 1";

        try {
            Timestamp generatedDate = jdbcTemplate.queryForObject(selectQuery, new SingleColumnRowMapper<>());

            // Convert Timestamp to String
            return generatedDate.toLocalDateTime().format(DateTimeFormatter.ISO_DATE_TIME);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
 public String addlogin_details(UserForm user) {
        try {
            String selectUserNameQuery = "SELECT user_name FROM user_login_details WHERE userid = ?";
            String userName = jdbcTemplate.queryForObject(selectUserNameQuery, new Object[]{user.getUserId()}, String.class);

            if (userName != null) {
                String selectBlockedStatusQuery = "SELECT blocked FROM user_login_details WHERE userid = ?";
                Integer blocked = jdbcTemplate.queryForObject(selectBlockedStatusQuery, new Object[]{user.getUserId()}, Integer.class);

                if (blocked != null) {
                    if (blocked == 0) {
                        String updateLastLoginDateQuery = "UPDATE user_login_details SET last_login_date = date(date_add(now(), INTERVAL 330 MINUTE)) WHERE userid = ?";
                        jdbcTemplate.update(updateLastLoginDateQuery, user.getUserId());
                        return null; // Equivalent to your initial implementation where status remains null if the user is not blocked
                    } else if (blocked == 1) {
                        System.out.println("expired");
                        return "expired";
                    } else if (blocked == 2) {
                        System.out.println("blocked by admin");
                        return "blocked";
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
public boolean loginRestiction(String userId) {
        boolean loginFlag = false;

        try {
            String sql1 = "SELECT curdate() AS current_date, DATE(us.submit_time) AS submit_time, um.cutoffdate, us.audit_date "
                    + "FROM user_mobile us INNER JOIN user_master um ON us.user_id = um.user_id WHERE um.user_Id = ?";

            String sql = "SELECT um.user_id, us.user_name, um.trackId, um.first_name, um.mobile, um.account_num, um.acStatus, um.ifsc_code,"
                    + " um.icStatus, kb.image_path AS passbook_path, um.pbStatus, um.GovtIdStatus, um.unStatus, kb1.image_path AS govtId_path, ct.city_name, "
                    + "(SELECT team_name FROM h2h_teams WHERE team_id=us.parent_user_id AND sup_user_id != 0) AS team_name, "
                    + "(SELECT user_name FROM user_master WHERE user_id = us.agencyId) AS Agency, DATE(um.submit_time) AS submit_date, "
                    + "DATE(us.cutoffDate) AS cutoff_date "
                    + "FROM user_mobile um INNER JOIN kycPhotoTable kb ON kb.userId = um.user_id AND kb.phototype_ID = 851 "
                    + "INNER JOIN kycPhotoTable kb1 ON kb1.userId = um.user_id AND kb1.phototype_ID = 852 "
                    + "INNER JOIN user_master us ON us.user_id = um.user_id INNER JOIN city_master ct ON ct.city_id = us.city "
                    + "WHERE (unStatus != 'Y' AND acStatus != 'Y' AND icStatus != 'Y' AND pbStatus != 'Y' AND GovtIdStatus != 'Y' AND "
                    + "um.account_num IS NOT NULL AND um.ifsc_code IS NOT NULL) AND us.parent_user_id NOT IN (SELECT team_id FROM kyc_flag) "
                    + "AND us.user_type IN (4) AND um.user_id = ?";

            Map<String, Object> userData = jdbcTemplate.queryForMap(sql, userId);

            if (!userData.isEmpty()) {
                System.out.println(sql);
                Map<String, Object> datesData = jdbcTemplate.queryForMap(sql1, userId);

                Date submitTime = (Date) datesData.get("submit_time");
                Date cutoffDate = (Date) datesData.get("cutoffdate");
                Date currentDate = (Date) datesData.get("current_date");
                String auditDate = (String) datesData.get("audit_date");
                String acStatus = (String) userData.get("acStatus");
                String icStatus = (String) userData.get("icStatus");
                String pbStatus = (String) userData.get("pbStatus");
                String govtIdStatus = (String) userData.get("GovtIdStatus");
                String unStatus = (String) userData.get("unStatus");

                if (auditDate == null) {
                    loginFlag = !(submitTime.compareTo(cutoffDate) == 0 || submitTime.compareTo(cutoffDate) < 0);
                } else if (("N".equals(acStatus) || "N".equals(icStatus) || "N".equals(pbStatus)
                        || "N".equals(govtIdStatus) || "N".equals(unStatus)) && auditDate != null) {
                    loginFlag = !(currentDate.compareTo(cutoffDate) == 0 || currentDate.compareTo(cutoffDate) < 0);
                } else if (("P".equals(acStatus) && "P".equals(icStatus) && "P".equals(pbStatus)
                        && "P".equals(govtIdStatus) && "P".equals(unStatus)) && auditDate != null) {
                    loginFlag = !(submitTime.compareTo(cutoffDate) == 0 || submitTime.compareTo(cutoffDate) < 0);
                }
            } else {
                Map<String, Object> datesData = jdbcTemplate.queryForMap(sql1, userId);
                Date currentDate = (Date) datesData.get("current_date");
                Date cutoffDate = (Date) datesData.get("cutoffdate");
                loginFlag = !(currentDate.compareTo(cutoffDate) == 0 || currentDate.compareTo(cutoffDate) < 0);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return loginFlag;
    }
public boolean kycCheck(String userId) {
        int agencyId = 0;
        int teamId = 0;
        int userType = 0;

        try {
            String query = "SELECT agencyid, parent_user_id, user_type FROM user_master WHERE user_id = ?";

            Map<String, Object> result = jdbcTemplate.queryForMap(query, userId);

            agencyId = (Integer) result.get("agencyid");
            teamId = (Integer) result.get("parent_user_id");
            userType = (Integer) result.get("user_type");

            return checkkycflag(agencyId, teamId, userId, userType);

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
 private boolean checkkycflag(int agencyId, int teamId, String userId, int userType) {
        int kycNotRequired = 0;
        int kycRequiredAgency = 0;
        try {
            if (userType == 21 || userType == 2 || userType == 3) {
                return true;
            } else {
                String query1 = "SELECT id FROM kyc_flag WHERE team_id = ?";
                List<Map<String, Object>> results1 = jdbcTemplate.queryForList(query1, teamId);

                if (!results1.isEmpty()) {
                    kycNotRequired = 1;
                }

                String query2 = "SELECT id FROM kyc_agency WHERE user_id = ?";
                List<Map<String, Object>> results2 = jdbcTemplate.queryForList(query2, agencyId);

                if (!results2.isEmpty()) {
                    kycRequiredAgency = 1;
                }

                if (kycRequiredAgency == 0 || kycNotRequired == 1) {
                    System.out.println("inside if condition");
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }
 public int getMaxKYCTries(String configName) {
        int maxTries = 0;

        try {
            String sql = "SELECT config_value FROM configdata WHERE config_name = ?";
            Integer configValue = jdbcTemplate.queryForObject(sql, new Object[]{configName}, Integer.class);
            
            if (configValue != null) {
                maxTries = configValue;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return maxTries;
    }
public boolean checkCutoff(String userId) {
        boolean flag = false;

        try {
            String sql = "SELECT DATEDIFF(cutoffdate, DATE(NOW())) AS leftdays FROM user_master WHERE user_id = ? AND retakeKyc='Y' AND user_type=4 "
                        + "AND user_id NOT IN (SELECT user_id FROM user_mobile)";
            
            Integer leftDays = jdbcTemplate.queryForObject(sql, new Object[]{userId}, Integer.class);
            
            if (leftDays != null && leftDays < 0) {
                flag = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return flag;
    }
public int getRemainingDays(String userId) {
        int daysLeft = 0;

        try {
            String sql = "SELECT DATEDIFF(DATE(cutOffDate), DATE(NOW())) AS daysLeft FROM user_master WHERE user_id = ?";
            
            Integer days = jdbcTemplate.queryForObject(sql, new Object[]{userId}, Integer.class);
            
            if (days != null) {
                if (days >= 0) {
                    daysLeft = days + 1;
                } else {
                    daysLeft = 0;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return daysLeft;
    } public int getKycCount(String userId) {
        int kycTries = 0;

        try {
            String sql = "SELECT kyc_try FROM user_master WHERE user_Id = ?";
            
            Integer result = jdbcTemplate.queryForObject(sql, new Object[]{userId}, Integer.class);
            
            if (result != null) {
                kycTries = result;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return kycTries;
    }
 public String getRetakeFlag(String userId) {
        String retakeFlag = "";
        try {
            String sql = "SELECT retakeKyc FROM user_master WHERE user_id = ?";
            String result = jdbcTemplate.queryForObject(sql, new Object[]{userId}, String.class);
            if (result != null) {
                retakeFlag = result;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return retakeFlag;
    }
 public JSONArray getAllBrands(UserForm user) {
        String sql = "SELECT DISTINCT a.field_data_id, a.Field_Data_Name, a.no_of_primaryCalls, a.no_of_secondaryCalls, a.no_of_sampling, a.no_of_terCalls, a.no_of_qatCalls,"
                + "a.no_of_qunCalls, a.has_Video, a.has_Audio, a.start_hour, a.end_hour, s.survey_id, a.isNonH2h "
                + "FROM (SELECT b.field_data_id, b.Field_Data_Name, b.no_of_primaryCalls, b.no_of_secondaryCalls, b.no_of_sampling, b.no_of_terCalls, b.no_of_qatCalls, "
                + "b.no_of_qunCalls, b.has_Video, b.has_Audio, b.start_hour, b.end_hour, b.isNonH2h FROM brands b WHERE b.disabled='N') AS a "
                + "LEFT JOIN survey s ON s.brandId = a.Field_data_id AND s.agencyId= ? AND s.user_type = 3 AND s.disabled = 0";

        JSONArray jsonArray = new JSONArray();
        try {
            jsonArray = jdbcTemplate.query(sql, new Object[]{user.getAgencyId()}, new RowMapper<JSONObject>() {
                @Override
                public JSONObject mapRow(ResultSet rs, int rowNum) throws SQLException {
                    JSONObject jsonObject = new JSONObject();
                    jsonObject.put("bId", rs.getString("field_data_id"));
                    jsonObject.put("bNm", rs.getString("Field_Data_Name"));
                    jsonObject.put("NPc", rs.getInt("no_of_primaryCalls"));
                    jsonObject.put("NSc", rs.getInt("no_of_secondaryCalls"));
                    jsonObject.put("NSp", rs.getInt("no_of_sampling"));
                    jsonObject.put("N3c", rs.getInt("no_of_terCalls"));
                    jsonObject.put("N4c", rs.getInt("no_of_qatCalls"));
                    jsonObject.put("N5c", rs.getInt("no_of_qunCalls"));
                    jsonObject.put("hasVideo", rs.getInt("has_Video"));
                    jsonObject.put("hasAudio", rs.getInt("has_Audio"));
                    jsonObject.put("startTime", rs.getInt("start_hour"));
                    jsonObject.put("endTime", rs.getInt("end_hour"));
                    String surId = rs.getString("survey_id") != null ? rs.getString("survey_id") : "";
                    jsonObject.put("surId", surId);
                    jsonObject.put("survey", getQIds(surId)); // Assuming getQIds method exists
                    jsonObject.put("images", getDemoImageCount(rs.getString("field_data_id"))); // Assuming getDemoImageCount method exists
                    jsonObject.put("popup", getBrandIncentiveFlag(rs.getString("field_data_id"))); // Assuming getBrandIncentiveFlag method exists
                    jsonObject.put("isNonH2h", rs.getInt("isNonH2h"));
                    return jsonObject;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonArray;
    }
 public boolean optTeamCheck(UserForm user) {
        String sql = "SELECT op_team_id FROM op_team WHERE op_team_id = ?";
        
        try {
            Integer opTeamId = jdbcTemplate.queryForObject(sql, new Object[]{user.getTeam()}, Integer.class);
            return opTeamId != null;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
 public JSONArray getQIds(String surveyId) {
        JSONArray jsonArray = new JSONArray();

        if (surveyId != null && !surveyId.isEmpty()) {
            String sql = "SELECT q_id FROM question WHERE survey_id = ? AND disabled = 0";

            try {
                List<Integer> qIds = jdbcTemplate.query(sql, new Object[]{surveyId}, new RowMapper<Integer>() {
                    @Override
                    public Integer mapRow(ResultSet rs, int rowNum) throws SQLException {
                        return rs.getInt("q_id");
                    }
                });

                for (Integer qId : qIds) {
                    jsonArray.put(qId);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return jsonArray;
    }
public int getDemoImageCount(String brandId) {
        String sql = "SELECT demo_image_count FROM brand_demo_config WHERE brand_id = ?";

        try {
            return jdbcTemplate.query(sql, new Object[]{brandId}, new ResultSetExtractor<Integer>() {
                @Override
                public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
                    if (rs.next()) {
                        return rs.getInt("demo_image_count");
                    }
                    return 2; // default is 2 images beforeImage and afterImage so returning 2
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 2; // default is 2 images beforeImage and afterImage so returning 2
    }
 public int getBrandIncentiveFlag(String brandId) {
        String sql = "SELECT brand_id FROM brand_incentive_config WHERE brand_id = ?";

        try {
            return jdbcTemplate.query(sql, new Object[]{brandId}, new ResultSetExtractor<Integer>() {
                @Override
                public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
                    if (rs.next()) {
                        return 1;
                    }
                    return 0;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }
public JSONArray getBrandsByTeamId(UserForm user, int semFlag) {
        String sql;
        JSONArray jsonArray = new JSONArray();
        // Your logic to build the SQL statement
        // ...

        jsonArray = jdbcTemplate.query(sql, new RowMapper<JSONObject>() {
            @Override
            public JSONObject mapRow(ResultSet rs, int rowNum) throws SQLException {
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("bId", rs.getString(1));
                jsonObject.put("bNm", rs.getString(2));
                jsonObject.put("NPc", rs.getInt(3));
                jsonObject.put("NSc", rs.getInt(4));
                jsonObject.put("NSp", rs.getInt(5));
                jsonObject.put("N3c", rs.getInt(6));
                jsonObject.put("N4c", rs.getInt(7));
                jsonObject.put("N5c", rs.getInt(8));
                jsonObject.put("hasVideo", rs.getInt(9));
                jsonObject.put("hasAudio", rs.getInt(10));
                jsonObject.put("startTime", rs.getInt(11));
                jsonObject.put("endTime", rs.getInt(12));
                String surId = rs.getString(13) != null ? rs.getString(13) : "";
                jsonObject.put("surId", surId);
                jsonObject.put("survey", getQIds(surId));
                jsonObject.put("images", getDemoImageCount(rs.getString(1)));
                jsonObject.put("popup", getBrandIncentiveFlag(rs.getString(1)));
                jsonObject.put("isNonH2h", rs.getInt("isNonH2h"));

                return jsonObject;
            }
        });
        return jsonArray;
    }
public int getTeamId(int supervisorUserId) {
        String sql = "SELECT TEAM_ID FROM H2H_TEAMS WHERE SUP_USER_ID = ? LIMIT 1";

        try {
            return jdbcTemplate.query(sql, new Object[]{supervisorUserId}, new ResultSetExtractor<Integer>() {
                @Override
                public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
                    return rs.next() ? rs.getInt(1) : 0;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
public int getSupTeamId(int promoterUserId) {
        String sql = "SELECT sup_user_id FROM H2H_TEAMS WHERE team_id = (select parent_user_id from user_master where user_id= ?) LIMIT 1";

        try {
            return jdbcTemplate.query(sql, new Object[]{promoterUserId}, new ResultSetExtractor<Integer>() {
                @Override
                public Integer extractData(ResultSet rs) throws SQLException, DataAccessException {
                    return rs.next() ? rs.getInt(1) : 0;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
 public JSONObject getTeamPhotoLatLong(int supId, String trackId) {
        String dt = (trackId == null) ? new SimpleDateFormat("yyyyMM").format(new Date()) : trackId.substring(0, 6);
        String sql = "SELECT tft.lattitude, tft.longitude FROM track_fieldphoto_table tft WHERE "
                + "tft.track_id = (SELECT max(track_id) FROM h2h_main WHERE userId = ? AND track_id LIKE ? LIMIT 1) AND phototype_id = 262";

        try {
            return jdbcTemplate.query(sql, new Object[]{supId, dt + "%"}, new ResultSetExtractor<JSONObject>() {
                @Override
                public JSONObject extractData(ResultSet rs) throws SQLException, DataAccessException {
                    JSONObject json = new JSONObject();
                    if (rs.next()) {
                        json.put("sup_lat", rs.getString("lattitude"));
                        json.put("sup_lng", rs.getString("longitude"));
                        json.put("sup_id", supId);
                    }
                    return json;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
 public String getPromoByTeamId(int teamId) {
        String sql = "SELECT user_id, user_name FROM user_master WHERE parent_user_id = ? AND disabled = 'N' AND user_type in (4,6)";

        try {
            List<PromotersList> pList = jdbcTemplate.query(sql, new Object[]{teamId}, new RowMapper<PromotersList>() {
                @Override
                public PromotersList mapRow(ResultSet rs, int rowNum) throws SQLException {
                    PromotersList pros = new PromotersList();
                    pros.setPrId(rs.getInt("user_id"));
                    pros.setPrName(rs.getString("user_name"));
                    return pros;
                }
            });

            Gson gson = new Gson();
            String res = gson.toJson(pList);
            return res.replace('\\', '\u0000');
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    // ... Other methods and the PromotersList class
}
 public String getTrainingByTeam(int teamId) {
        String trSql = "SELECT training_id, training_addr, start_date FROM training WHERE DATE(start_date) BETWEEN DATE_ADD(DATE(DATE_ADD(NOW(), INTERVAL 330 MINUTE)), INTERVAL -7 DAY) AND DATE(DATE_ADD(NOW(), INTERVAL 330 MINUTE)) AND team = ? AND status != 'Completed'";

        try {
            List<TRData> trngList = jdbcTemplate.query(trSql, new Object[]{teamId}, new RowMapper<TRData>() {
                @Override
                public TRData mapRow(ResultSet rs, int rowNum) throws SQLException {
                    TRData trData = new TRData();
                    trData.setTrngID(rs.getInt("training_id"));
                    trData.setTrngAddress(rs.getString("training_addr"));
                    trData.setTrngStartDt(rs.getString("start_date"));
                    return trData;
                }
            });

            Gson gson = new GsonBuilder().serializeNulls().create();
            return gson.toJson(trngList);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    // ... Other methods and the TRData class
}
 public String getBatchNo() {
        String sql = "SELECT batch_no FROM zipdial_batchdetails ORDER BY generated_date DESC LIMIT 1";
        try {
            return jdbcTemplate.queryForObject(sql, String.class);
        } catch (DataAccessException e) {
            e.printStackTrace();
            return "";
        }
    }
