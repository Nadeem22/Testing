 public String smsGenHisDate() {
        String selectQuery = "SELECT event_date FROM sms_history ORDER BY history_id DESC LIMIT 1";

        try {
            Timestamp generatedDate = jdbcTemplate.queryForObject(selectQuery, new SingleColumnRowMapper<>());

            // Convert Timestamp to String
            return generatedDate.toLocalDateTime().format(DateTimeFormatter.ISO_DATE_TIME);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
 public String addlogin_details(UserForm user) {
        try {
            String selectUserNameQuery = "SELECT user_name FROM user_login_details WHERE userid = ?";
            String userName = jdbcTemplate.queryForObject(selectUserNameQuery, new Object[]{user.getUserId()}, String.class);

            if (userName != null) {
                String selectBlockedStatusQuery = "SELECT blocked FROM user_login_details WHERE userid = ?";
                Integer blocked = jdbcTemplate.queryForObject(selectBlockedStatusQuery, new Object[]{user.getUserId()}, Integer.class);

                if (blocked != null) {
                    if (blocked == 0) {
                        String updateLastLoginDateQuery = "UPDATE user_login_details SET last_login_date = date(date_add(now(), INTERVAL 330 MINUTE)) WHERE userid = ?";
                        jdbcTemplate.update(updateLastLoginDateQuery, user.getUserId());
                        return null; // Equivalent to your initial implementation where status remains null if the user is not blocked
                    } else if (blocked == 1) {
                        System.out.println("expired");
                        return "expired";
                    } else if (blocked == 2) {
                        System.out.println("blocked by admin");
                        return "blocked";
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
public boolean loginRestiction(String userId) {
        boolean loginFlag = false;

        try {
            String sql1 = "SELECT curdate() AS current_date, DATE(us.submit_time) AS submit_time, um.cutoffdate, us.audit_date "
                    + "FROM user_mobile us INNER JOIN user_master um ON us.user_id = um.user_id WHERE um.user_Id = ?";

            String sql = "SELECT um.user_id, us.user_name, um.trackId, um.first_name, um.mobile, um.account_num, um.acStatus, um.ifsc_code,"
                    + " um.icStatus, kb.image_path AS passbook_path, um.pbStatus, um.GovtIdStatus, um.unStatus, kb1.image_path AS govtId_path, ct.city_name, "
                    + "(SELECT team_name FROM h2h_teams WHERE team_id=us.parent_user_id AND sup_user_id != 0) AS team_name, "
                    + "(SELECT user_name FROM user_master WHERE user_id = us.agencyId) AS Agency, DATE(um.submit_time) AS submit_date, "
                    + "DATE(us.cutoffDate) AS cutoff_date "
                    + "FROM user_mobile um INNER JOIN kycPhotoTable kb ON kb.userId = um.user_id AND kb.phototype_ID = 851 "
                    + "INNER JOIN kycPhotoTable kb1 ON kb1.userId = um.user_id AND kb1.phototype_ID = 852 "
                    + "INNER JOIN user_master us ON us.user_id = um.user_id INNER JOIN city_master ct ON ct.city_id = us.city "
                    + "WHERE (unStatus != 'Y' AND acStatus != 'Y' AND icStatus != 'Y' AND pbStatus != 'Y' AND GovtIdStatus != 'Y' AND "
                    + "um.account_num IS NOT NULL AND um.ifsc_code IS NOT NULL) AND us.parent_user_id NOT IN (SELECT team_id FROM kyc_flag) "
                    + "AND us.user_type IN (4) AND um.user_id = ?";

            Map<String, Object> userData = jdbcTemplate.queryForMap(sql, userId);

            if (!userData.isEmpty()) {
                System.out.println(sql);
                Map<String, Object> datesData = jdbcTemplate.queryForMap(sql1, userId);

                Date submitTime = (Date) datesData.get("submit_time");
                Date cutoffDate = (Date) datesData.get("cutoffdate");
                Date currentDate = (Date) datesData.get("current_date");
                String auditDate = (String) datesData.get("audit_date");
                String acStatus = (String) userData.get("acStatus");
                String icStatus = (String) userData.get("icStatus");
                String pbStatus = (String) userData.get("pbStatus");
                String govtIdStatus = (String) userData.get("GovtIdStatus");
                String unStatus = (String) userData.get("unStatus");

                if (auditDate == null) {
                    loginFlag = !(submitTime.compareTo(cutoffDate) == 0 || submitTime.compareTo(cutoffDate) < 0);
                } else if (("N".equals(acStatus) || "N".equals(icStatus) || "N".equals(pbStatus)
                        || "N".equals(govtIdStatus) || "N".equals(unStatus)) && auditDate != null) {
                    loginFlag = !(currentDate.compareTo(cutoffDate) == 0 || currentDate.compareTo(cutoffDate) < 0);
                } else if (("P".equals(acStatus) && "P".equals(icStatus) && "P".equals(pbStatus)
                        && "P".equals(govtIdStatus) && "P".equals(unStatus)) && auditDate != null) {
                    loginFlag = !(submitTime.compareTo(cutoffDate) == 0 || submitTime.compareTo(cutoffDate) < 0);
                }
            } else {
                Map<String, Object> datesData = jdbcTemplate.queryForMap(sql1, userId);
                Date currentDate = (Date) datesData.get("current_date");
                Date cutoffDate = (Date) datesData.get("cutoffdate");
                loginFlag = !(currentDate.compareTo(cutoffDate) == 0 || currentDate.compareTo(cutoffDate) < 0);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return loginFlag;
    }
public boolean kycCheck(String userId) {
        int agencyId = 0;
        int teamId = 0;
        int userType = 0;

        try {
            String query = "SELECT agencyid, parent_user_id, user_type FROM user_master WHERE user_id = ?";

            Map<String, Object> result = jdbcTemplate.queryForMap(query, userId);

            agencyId = (Integer) result.get("agencyid");
            teamId = (Integer) result.get("parent_user_id");
            userType = (Integer) result.get("user_type");

            return checkkycflag(agencyId, teamId, userId, userType);

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
 private boolean checkkycflag(int agencyId, int teamId, String userId, int userType) {
        int kycNotRequired = 0;
        int kycRequiredAgency = 0;
        try {
            if (userType == 21 || userType == 2 || userType == 3) {
                return true;
            } else {
                String query1 = "SELECT id FROM kyc_flag WHERE team_id = ?";
                List<Map<String, Object>> results1 = jdbcTemplate.queryForList(query1, teamId);

                if (!results1.isEmpty()) {
                    kycNotRequired = 1;
                }

                String query2 = "SELECT id FROM kyc_agency WHERE user_id = ?";
                List<Map<String, Object>> results2 = jdbcTemplate.queryForList(query2, agencyId);

                if (!results2.isEmpty()) {
                    kycRequiredAgency = 1;
                }

                if (kycRequiredAgency == 0 || kycNotRequired == 1) {
                    System.out.println("inside if condition");
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }
