public List<SMSHistory> getSMSHistory(String fromDate, String toDate, String uploadType, String page) {
    List<SMSHistory> historyList = new ArrayList<>();

    StringBuilder query = new StringBuilder("SELECT file_name, event_date, uploaded_date, total_count FROM sms_history");
    Map<String, Object> queryParams = new HashMap<>();

    if ("searchPage".equals(page)) {
        query.append(" WHERE ");
        if (!fromDate.isEmpty()) {
            query.append(" uploaded_date BETWEEN :fromDate AND :toDate AND");
            queryParams.put("fromDate", fromDate);
            queryParams.put("toDate", toDate.isEmpty() ? new SimpleDateFormat("yyyy-MM-dd").format(new Date()) : toDate);
        }
        if (!uploadType.isEmpty() && !"-1".equals(uploadType)) {
            String condition = "1".equals(uploadType) ? "!=" : "=";
            query.append(" file_name ").append(condition).append(" 'ZipDial' AND");
        }
        query.setLength(query.length() - 3);
    }

    query.append(" ORDER BY uploaded_date DESC");

    historyList = namedParameterJdbcTemplate.query(query.toString(), queryParams, new BeanPropertyRowMapper<>(SMSHistory.class));

    return historyList;
}
public void checkIfValidated(SmsValidationForm smsValidationForm, HttpSession session) {
        String userNameCurrentUser = (String) session.getAttribute("userName");

        String validationQuery = "SELECT zc.validated as 'validated',zc.user_id as 'user_id',(select um.user_name from user_master um where user_id=zc.user_id) as 'userName',(select user_name  from user_master where user_id = (select agencyid from user_master where user_id = zc.user_id)) as 'Agency Name' FROM zipdial_codes zc "
                + " where sms_code=? AND generated_date=?";
        
        jdbcTemplate.query(validationQuery, new Object[] { smsValidationForm.getSmsCode(), smsValidationForm.getDate() }, rs -> {
            smsValidationForm.setValidated(rs.getString("validated"));
            if (smsValidationForm.getValidated().equals("Y")) {
                smsValidationForm.setUsername(rs.getString("userName"));
                smsValidationForm.setAgency(rs.getString("Agency Name"));
                if (smsValidationForm.getAgency().equals(userNameCurrentUser)) {
                    smsValidationForm.setStatus("200");
                } else {
                    smsValidationForm.setStatus("403");
                }
            } else if (smsValidationForm.getValidated().equals("N")) {
                smsValidationForm.setStatus("401");
            } else {
                smsValidationForm.setStatus("404");
            }
        });
    }
}
public void checkIfValidated(SmsValidationForm smsValidationForm, HttpSession session) {
	String userNameCurrentUser = (String) session.getAttribute("userName");

	String validationQuery = "SELECT zc.validated as 'validated',zc.user_id as 'user_id'," +
			"(select um.user_name from user_master um where user_id=zc.user_id) as 'userName'," +
			"(select user_name  from user_master where user_id = (select agencyid from user_master where user_id = zc.user_id)) as 'Agency Name' " +
			"FROM zipdial_codes zc where sms_code=? AND generated_date=?";

	try {
		List<Map<String, Object>> rows = jdbcTemplate.queryForList(validationQuery, smsValidationForm.getSmsCode(), smsValidationForm.getDate());
		if (!rows.isEmpty()) {
			for (Map row : rows) {
				smsValidationForm.setValidated((String)row.get("validated"));
				if (smsValidationForm.getValidated().equals("Y")) {
					smsValidationForm.setUsername((String)row.get("userName"));
					smsValidationForm.setAgency((String)row.get("Agency Name"));
					if (smsValidationForm.getAgency().equals(userNameCurrentUser)) {
						smsValidationForm.setStatus("200");
					} else {
						smsValidationForm.setStatus("403");
					}
				} else if (smsValidationForm.getValidated().equals("N")) {
					smsValidationForm.setStatus("401");
				}
			}
		} else {
			smsValidationForm.setStatus("404");
		}
	} catch (DataAccessException ex) {
		ex.printStackTrace();
	}
}
