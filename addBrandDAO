 public List<Brands> getAllBrandDetails() {
        List<Brands> brandList = new ArrayList<>();
        
        String sql = "SELECT field_data_id, Field_Data_Name, primary_variant, secondary_variant, sampling FROM brands where field_data_id not in (21111, 22222) order by 2";
        
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql);

        for (Map<String, Object> row : rows) {
            Brands brand = new Brands();
            brand.setBrandId((String) row.get("field_data_id"));
            brand.setBrandName((String) row.get("Field_Data_Name"));
            brand.setPrimaryVariant((String) row.get("primary_variant"));
            brand.setSecondaryVariant((String) row.get("secondary_variant"));
            brand.setHasSampling((String) row.get("sampling"));
            brandList.add(brand);
        }

        return brandList;
    }
public List<Brands> getAllBrandsVarient() {
        String sql = "SELECT variant_name, variant_id FROM brand_variant";

        return jdbcTemplate.query(sql, new ResultSetExtractor<List<Brands>>() {
            @Override
            public List<Brands> extractData(ResultSet rs) throws SQLException {
                List<Brands> brandList = new ArrayList<>();
                while (rs.next()) {
                    Brands brand = new Brands();
                    brand.setVarientId(rs.getInt("variant_id"));
                    brand.setVarientName(rs.getString("variant_name"));
                    brandList.add(brand);
                }
                return brandList;
            }
        });
    }
   public List<Brands> getAllBrandDetails() {
        List<Brands> brandList = new ArrayList<>();
        
        String sql = "SELECT field_data_id, Field_Data_Name, primary_variant, secondary_variant, sampling FROM brands where field_data_id not in (21111, 22222) order by 2";
        
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql);

        for (Map<String, Object> row : rows) {
            Brands brand = new Brands();
            brand.setBrandId(String.valueOf(row.get("field_data_id")));
            brand.setBrandName((String) row.get("Field_Data_Name"));
            brand.setPrimaryVariant((String) row.get("primary_variant"));
            brand.setSecondaryVariant((String) row.get("secondary_variant"));
            brand.setHasSampling((String) row.get("sampling"));
            brandList.add(brand);
        }

        return brandList;
    }
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;

public class BrandDao {
    private JdbcTemplate jdbcTemplate;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public String addBrand(BrandForm brand, String option) {
        try {
            int sampling = 0, hasVdo = 0, hasAdo = 0, hasAdhoc = 0;
            if (brand.getSampling() != null) {
                if (!brand.getSampling().equals("")) {
                    sampling = 1;
                }
            }
            // ... (Other conditions for hasVdo, hasAdo, and hasAdhoc)

            if (option.equals("addBrand")) {
                String sql = "INSERT INTO BRANDS(field_data_name,field_data_details,primary_variant,secondary_variant,field_data_id,sampling,no_of_primaryCalls,no_of_secondaryCalls,no_of_Sampling,ter_variant, qat_variant, qun_variant, no_of_terCalls, no_of_qatCalls, no_of_qunCalls,pri_tur,sec_tur,ter_tur,qat_tur,qun_tur,has_Video,has_Audio,samp_tur,start_hour,end_hour,avg_conversion,freebie_name,isNonH2h) "
                        + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                jdbcTemplate.update(new PreparedStatementCreator() {
                    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                        PreparedStatement stmt = connection.prepareStatement(sql);
                        // Set the prepared statement parameters
                        // ...
                        return stmt;
                    }
                });
            } else if (!brand.getBrands().equals("-1") || (brand.getBrands() != null)) {
                String sqlUpdate = "UPDATE BRANDS set field_data_name =?,field_data_details= ?,"
                        + "primary_variant=?,secondary_variant=?,sampling=?, "
                        + "no_of_primaryCalls=?,no_of_secondaryCalls=?,no_of_Sampling=?, "
                        + "ter_variant=?, qat_variant=?, qun_variant=?, "
                        + "no_of_terCalls=?, no_of_qatCalls=?, no_of_qunCalls=?, "
                        + "pri_tur=?,sec_tur=?,ter_tur=?,qat_tur=?,qun_tur=?,has_Video=?,has_Audio=?,samp_tur=?,start_hour=?,end_hour=?,avg_conversion=?,freebie_name=?,isNonH2h=?"
                        + " where field_data_id= ?";

                jdbcTemplate.update(new PreparedStatementCreator() {
                    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                        PreparedStatement stmtUpdate = connection.prepareStatement(sqlUpdate);
                        // Set the prepared statement parameters
                        // ...
                        return stmtUpdate;
                    }
                });
            }

            String batchDetailsSql = "insert into brand_batchdetails(generated_date) value(?)";
            jdbcTemplate.update(batchDetailsSql, new Timestamp(System.currentTimeMillis()));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

        return "success";
    }
}
