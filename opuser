public List<Team> getOpTeamDropdown(String city, UserForm userLogin) {
        String sql;
        List<Object> params = new ArrayList<>();
        if (city == null || city.equals("-1")) {
            sql = "SELECT op.team_name, op_team_id FROM op_team op inner join h2h_teams ht on ht.team_id=op.op_team_id";
            if (userLogin.getUserType() != null && !userLogin.getUserType().equals("1") && !userLogin.getUserType().equals("17")) {
                sql += " where agencyId=? ";
                params.add(userLogin.getUserId());
            }
        } else {
            sql = "SELECT op.team_name, op_team_id FROM op_team op inner join h2h_teams ht on ht.team_id=op.op_team_id where ht.city_id=?";
            params.add(city);
            if (userLogin.getUserType() != null && !userLogin.getUserType().equals("1") && !userLogin.getUserType().equals("17")) {
                sql += " AND ht.agencyId=?";
                params.add(userLogin.getUserId());
            }
        }
        sql += " order by ht.team_name asc";
        System.out.println(sql);
        
        return jdbcTemplate.query(sql, params.toArray(), teamMapper);
    }

    private RowMapper<Team> teamMapper = (rs, rowNum) -> {
        Team team = new Team();
        team.setTeamName(rs.getString("team_name"));
        team.setTeamId(rs.getString("op_team_id"));
        return team;
    };
    
    
  @Autowired
private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

public List<User> getUserOp(String userName, String userType, String city, String team, String page,
                             UserForm loginUser, String value, String param) {

    System.out.println("page " + page);
    String query = "";

    if (loginUser.getUserType().equals("9")) {
        query = " MYQUERY "
                + " And um.agencyId=" + loginUser.getUserId();
    }

    MapSqlParameterSource parameters = new MapSqlParameterSource();
    if (page.equals("searchPage")) {
        if (!(userName.equals("") || userName.equals("-1"))) {
            query += " AND um.user_name like :userName ";
            parameters.addValue("userName", "%" + userName + "%");
        }
        if (!(userType==null || userType.equals("-1"))) {
            query += " AND um.user_type = :userType";
            parameters.addValue("userType", userType);
        }
        if (!(city==null|| city.equals("-1"))) {
            query += " AND um.city in (:city)";
            parameters.addValue("city", city);
        }
        if (!(team==null|| team.equals("-1"))) {
            query += " AND um.parent_user_id in (:team)";
            parameters.addValue("team", team);
        }
    }

    int start = ContextUtil.getReportProperties("report_start");
    int limitValue = ContextUtil.getReportProperties(param);
    if (!value.equals("0")) {
        int values = Integer.parseInt(value);
        query = query + "  limit " + (values * limitValue) + "," + (limitValue + 1);
    } else
        query = query + " limit " + start + "," + (limitValue + 1);

    System.out.println("query:##**" + query);
    List<User> userList = namedParameterJdbcTemplate.query(query, parameters, (rs, rowNum) -> {
        User user = new User();
        // Copy rest of the fields from result set to user object as in original code
        //...
        return user;
    });

    return userList;
}
List<User> userList = namedParameterJdbcTemplate.query(query, parameters, (rs, rowNum) -> {
    User user = new User();
    user.setId(rs.getInt(1));
    user.setUserId(rs.getInt(1));
    user.setUserName(rs.getString(2));
    int UserType = rs.getInt(3);
    user.setUserType(UserType);
    user.setUserTypeStr(modelMap.get(UserType));
    user.setDisabled(rs.getString(5).equals("L") && !param.equals("smsExcel_limit") ? "\nL\n" : rs.getString(5));
    user.setAddress(rs.getString(6));
    user.setCity(rs.getString(7));
    user.setFirstName((rs.getString(8)));
    user.setLastName(rs.getString(9));
    user.setTeamName(rs.getString(10));
    user.setEdit("\nEdit\n");
    user.setDelete("\nDelete\n");
    user.setIsActive((rs.getInt(11) == 0) ? "InActive" : "\nActive\n");
    if (!loginUser.getUserType().equals("1")) {
        user.setImei(rs.getString(12));
        user.setdName(rs.getString(13));
        user.setdModel(rs.getString(14));
        user.setApkVer(rs.getString(15));
        if (user.getUserType() >= 2 && user.getUserType() <= 6) {
            user.setAppListReq("\n" + ((rs.getInt(16) == 1) ? "Active" : "InActive") + "\n");
            user.setAppListRep("\nExport\n");
        }

        user.setName(rs.getString(17));
        user.setAge(rs.getInt(18));
        user.setDob(rs.getString(19));
        user.setWorkExp(rs.getString(20));
        user.setDoj(rs.getString(21));
        if (loginUser.getUserType().equals("9")) {
            String promoImgPath = rs.getString(22);
            String kycImagePath = rs.getString(23);
            String Isrejected = rs.getString(24);

            if (null != rs.getString(24) && rs.getString(24).equals("Y")) {

                Gson gson = new GsonBuilder().disableHtmlEscaping().create();
                if (null != promoImgPath) {
                    String path = "\nView Image\n";
                    user.setUserImage(path);
                }

            } else if (null != rs.getString(24) && rs.getString(24).equals("N")) {
                user.setUserImage("N/A");
            }
        }

    }
    return user;
});
