public List<Team> getOpTeamDropdown(String city, UserForm userLogin) {
        String sql;
        List<Object> params = new ArrayList<>();
        if (city == null || city.equals("-1")) {
            sql = "SELECT op.team_name, op_team_id FROM op_team op inner join h2h_teams ht on ht.team_id=op.op_team_id";
            if (userLogin.getUserType() != null && !userLogin.getUserType().equals("1") && !userLogin.getUserType().equals("17")) {
                sql += " where agencyId=? ";
                params.add(userLogin.getUserId());
            }
        } else {
            sql = "SELECT op.team_name, op_team_id FROM op_team op inner join h2h_teams ht on ht.team_id=op.op_team_id where ht.city_id=?";
            params.add(city);
            if (userLogin.getUserType() != null && !userLogin.getUserType().equals("1") && !userLogin.getUserType().equals("17")) {
                sql += " AND ht.agencyId=?";
                params.add(userLogin.getUserId());
            }
        }
        sql += " order by ht.team_name asc";
        System.out.println(sql);
        
        return jdbcTemplate.query(sql, params.toArray(), teamMapper);
    }

    private RowMapper<Team> teamMapper = (rs, rowNum) -> {
        Team team = new Team();
        team.setTeamName(rs.getString("team_name"));
        team.setTeamId(rs.getString("op_team_id"));
        return team;
    };
    
    
  @Autowired
private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

public List<User> getUserOp(String userName, String userType, String city, String team, String page,
                             UserForm loginUser, String value, String param) {

    System.out.println("page " + page);
    String query = "";

    if (loginUser.getUserType().equals("9")) {
        query = " MYQUERY "
                + " And um.agencyId=" + loginUser.getUserId();
    }

    MapSqlParameterSource parameters = new MapSqlParameterSource();
    if (page.equals("searchPage")) {
        if (!(userName.equals("") || userName.equals("-1"))) {
            query += " AND um.user_name like :userName ";
            parameters.addValue("userName", "%" + userName + "%");
        }
        if (!(userType==null || userType.equals("-1"))) {
            query += " AND um.user_type = :userType";
            parameters.addValue("userType", userType);
        }
        if (!(city==null|| city.equals("-1"))) {
            query += " AND um.city in (:city)";
            parameters.addValue("city", city);
        }
        if (!(team==null|| team.equals("-1"))) {
            query += " AND um.parent_user_id in (:team)";
            parameters.addValue("team", team);
        }
    }

    int start = ContextUtil.getReportProperties("report_start");
    int limitValue = ContextUtil.getReportProperties(param);
    if (!value.equals("0")) {
        int values = Integer.parseInt(value);
        query = query + "  limit " + (values * limitValue) + "," + (limitValue + 1);
    } else
        query = query + " limit " + start + "," + (limitValue + 1);

    System.out.println("query:##**" + query);
    List<User> userList = namedParameterJdbcTemplate.query(query, parameters, (rs, rowNum) -> {
        User user = new User();
        // Copy rest of the fields from result set to user object as in original code
        //...
        return user;
    });

    return userList;
}
List<User> userList = namedParameterJdbcTemplate.query(query, parameters, (rs, rowNum) -> {
    User user = new User();
    user.setId(rs.getInt(1));
    user.setUserId(rs.getInt(1));
    user.setUserName(rs.getString(2));
    int UserType = rs.getInt(3);
    user.setUserType(UserType);
    user.setUserTypeStr(modelMap.get(UserType));
    user.setDisabled(rs.getString(5).equals("L") && !param.equals("smsExcel_limit") ? "\nL\n" : rs.getString(5));
    user.setAddress(rs.getString(6));
    user.setCity(rs.getString(7));
    user.setFirstName((rs.getString(8)));
    user.setLastName(rs.getString(9));
    user.setTeamName(rs.getString(10));
    user.setEdit("\nEdit\n");
    user.setDelete("\nDelete\n");
    user.setIsActive((rs.getInt(11) == 0) ? "InActive" : "\nActive\n");
    if (!loginUser.getUserType().equals("1")) {
        user.setImei(rs.getString(12));
        user.setdName(rs.getString(13));
        user.setdModel(rs.getString(14));
        user.setApkVer(rs.getString(15));
        if (user.getUserType() >= 2 && user.getUserType() <= 6) {
            user.setAppListReq("\n" + ((rs.getInt(16) == 1) ? "Active" : "InActive") + "\n");
            user.setAppListRep("\nExport\n");
        }

        user.setName(rs.getString(17));
        user.setAge(rs.getInt(18));
        user.setDob(rs.getString(19));
        user.setWorkExp(rs.getString(20));
        user.setDoj(rs.getString(21));
        if (loginUser.getUserType().equals("9")) {
            String promoImgPath = rs.getString(22);
            String kycImagePath = rs.getString(23);
            String Isrejected = rs.getString(24);

            if (null != rs.getString(24) && rs.getString(24).equals("Y")) {

                Gson gson = new GsonBuilder().disableHtmlEscaping().create();
                if (null != promoImgPath) {
                    String path = "\nView Image\n";
                    user.setUserImage(path);
                }

            } else if (null != rs.getString(24) && rs.getString(24).equals("N")) {
                user.setUserImage("N/A");
            }
        }

    }
    return user;
});
  public void loadDummyTeamNamesForOpSupervisor(HttpSession session, String city) {
        UserForm loginUser = (UserForm) session.getAttribute("userLogin");
        List<Team> teamList;
        String sql = "SELECT t.TEAM_NAME, t.op_TEAM_ID FROM op_team t WHERE t.sup_user_id=0 and t.CITY_ID = ?";

        if (loginUser.getUserType().equals("1")) {
            sql += " order by t.team_name asc";
            teamList = jdbcTemplate.query(sql, new Object[] { city }, new TeamRowMapper());
        } else {
            sql += " And t.agencyId=? order by t.team_name asc";
            teamList = jdbcTemplate.query(sql, new Object[] { city, loginUser.getUserId() }, new TeamRowMapper());
        }

        session.setAttribute("teamList", teamList);
    }

    private static final class TeamRowMapper implements RowMapper<Team> {
        public Team mapRow(ResultSet rs, int rowNum) throws SQLException {
            Team team = new Team();
            team.setTeamName(rs.getString("TEAM_NAME"));
            team.setTeamId(rs.getString("op_TEAM_ID"));
            return team;
        }
    }
    public void loadTeamNamesOp(HttpSession session, String userType, String cityId) {
        UserForm loginUser = (UserForm) session.getAttribute("userLogin");

        if (userType.equals("4")) {
            userType = "3";
        } else if (userType.equals("6")) {
            userType = "5";
        } else if (userType.equals("11")) {
            userType = "2,3,5";
        }

        String sql = "SELECT t.TEAM_NAME, t.TEAM_ID, u.user_name FROM op_TEAMS t, USER_MASTER u WHERE t.sup_user_id = u.user_id and u.user_type in (?) and t.CITY_ID = ?";
        if (loginUser.getUserType().equals("1")) {
            sql += " order by t.team_name asc";
        } else {
            sql += " And t.agencyId = ? order by t.team_name asc";
        }

        List<Team> teamList = loginUser.getUserType().equals("1")
                ? jdbcTemplate.query(sql, new Object[]{userType, cityId}, new TeamRowMapper())
                : jdbcTemplate.query(sql, new Object[]{userType, cityId, loginUser.getUserId()}, new TeamRowMapper());

        session.setAttribute("teamList", teamList);
        session.removeAttribute("supList1");
        session.removeAttribute("supList2");
        session.removeAttribute("promoList1");
        session.removeAttribute("promoList2");
    }

    private static final class TeamRowMapper implements RowMapper<Team> {
        public Team mapRow(ResultSet rs, int rowNum) throws SQLException {
            Team team = new Team();
            team.setTeamName(rs.getString("TEAM_NAME"));
            team.setTeamId(rs.getString("TEAM_ID"));
            team.setUserName(rs.getString("user_name"));
            return team;
        }
    }
   public String addUserOp(OpUserForm user, String agencyId) {
        String sql = "INSERT INTO USER_MASTER(user_name, user_type, user_password, disabled, First_name, Last_name, phone, address, city, state, parent_user_id,agencyId, user_created) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,date_add(now(), INTERVAL 330 MINUTE))";
        KeyHolder keyHolder = new GeneratedKeyHolder();
        
        String sqlUpdate = "UPDATE USER_MASTER SET PARENT_USER_ID = (SELECT TEAM_ID FROM h2h_TEAMS WHERE TEAM_NAME=?) WHERE USER_NAME=?";

        try {
            transactionTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                    jdbcTemplate.update(con -> {
                        PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                        ps.setString(1, user.getUserName().trim());
                        ps.setString(2, user.getUserType());
                        ps.setString(3, user.getUserPassword().trim());
                        ps.setString(4, "N");
                        ps.setString(5, user.getFirstName());
                        ps.setString(6, user.getLastName());
                        ps.setString(7, user.getPhoneNo());
                        ps.setString(8, user.getAddress());
                        ps.setString(9, user.getCity());
                        ps.setString(10, user.getState());
                        ps.setString(11, user.getUserType().equals("21") ? "0" : user.getTeamNameDrop());
                        ps.setString(12, agencyId);
                        return ps;
                    }, keyHolder);

                    int id = keyHolder.getKey().intValue();

                    if ("2".equals(user.getUserType()) || "3".equals(user.getUserType()) || "5".equals(user.getUserType())) {
                        if (user.getTeamNameDrop() != null && !user.getTeamNameDrop().equals("-1")) {
                            jdbcTemplate.update("UPDATE h2h_TEAMS SET SUP_USER_ID = (SELECT USER_ID FROM USER_MASTER WHERE USER_NAME = ?) WHERE TEAM_ID = ?", user.getUserName(), user.getTeamNameDrop());
                        } else if (user.getTeamNameText() != null && !user.getTeamNameText().trim().isEmpty()) {
                            jdbcTemplate.update("INSERT INTO h2h_TEAMS(TEAM_NAME, CITY_ID, SUP_USER_ID,agencyId) VALUES(?, ?, (SELECT USER_ID FROM USER_MASTER WHERE USER_NAME = ?), ?)",
                                    user.getTeamNameText().trim(), user.getCity(), user.getUserName().trim(), agencyId);
                            jdbcTemplate.update("INSERT INTO op_team(op_team_id,TEAM_NAME) VALUES((SELECT team_id FROM h2h_teams WHERE team_NAME = ?), ?)",
                                    user.getTeamNameText().trim(), user.getTeamNameText().trim());
                        }
                    }

                    if (user.getMulTeamNameDrop() != null && user.getMulTeamNameDrop().length != 0
                            && "11".equals(user.getUserType())) {
                        mapTeamNames(user.getMulTeamNameDrop(), String.valueOf(id), agencyId);
                    }

                    if ("2".equals(user.getUserType()) || "3".equals(user.getUserType()) || "5".equals(user.getUserType())) {
                        if (user.getTeamNameText() != null && !user.getTeamNameText().isEmpty()) {
                            jdbcTemplate.update(sqlUpdate, user.getTeamNameText().trim(), user.getUserName());
                        }
                    }
                }
            });

            return "success";
        } catch (Exception e) {
            // log your exception
            return null;
        }
    }
