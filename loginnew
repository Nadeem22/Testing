public UserForm authenticate(UserForm user) {

        try {
            String sqlApk = "SELECT apk_version as APKVersion, apk_path as APKPath FROM hul_apk ORDER BY apk_version DESC LIMIT 1";
            Map<String, Object> apkInfo = jdbcTemplate.queryForMap(sqlApk);
            int latestApkVer = (int) apkInfo.get("APKVersion");
            String apkPath = (String) apkInfo.get("APKPath");

            String sql = "SELECT USER_ID, USER_NAME, USER_PASSWORD, USER_TYPE, DISABLED, CITY,"
                    + "(SELECT state_name FROM state_master WHERE state_id = state) as STATE,"
                    + "isLoggedIn,agencyId,imei,parent_user_id,"
                    + "isPana,apk_upgrade_req,insAppReq,Image_path,is_aws,dash_report,img_res, img_qly, geo_fence_req "
                    + "FROM USER_MASTER WHERE USER_PASSWORD = ? AND USER_NAME = ?";

            try {
                Map<String, Object> userResult = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());
                user = populateUserForm(user, userResult);
                if((int) userResult.get("apk_upgrade_req") == 1) {
                    user.setApkVersion(latestApkVer);
                    user.setApkPath(apkPath);
                } else {
                    user.setApkVersion(0);
                }
            } catch (EmptyResultDataAccessException ex) {
                sql = "SELECT USER_ID, USER_NAME, USER_PASSWORD, USER_TYPE, DISABLED, CITY,"
                        + "(SELECT state_name FROM h2hsoc_schema.state_master WHERE state_id = state) as STATE,"
                        + "isLoggedIn,agencyId,imei,parent_user_id,"
                        + "isPana,apk_upgrade_req,insAppReq,Image_path,is_aws,dash_report,img_res, img_qly, geo_fence_req,spoc "
                        + "FROM h2hsoc_schema.USER_MASTER WHERE USER_PASSWORD = ? AND USER_NAME = ?";
                Map<String, Object> userResult = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());
                user = populateUserForm(user, userResult);
            }
        } catch (Exception e) {
            e.printStackTrace();
            user = null;
        }
        return user;
    }

    private UserForm populateUserForm(UserForm user, Map<String, Object> rowData) {
        user.setUserId((String) rowData.get("USER_ID"));
        user.setUserType((String) rowData.get("USER_TYPE"));
        user.setDisabled((String) rowData.get("DISABLED"));
        user.setCity((String) rowData.get("CITY"));
        user.setState((String) rowData.get("STATE"));
        user.setIsLoggedIn((String) rowData.get("isLoggedIn"));
        user.setAgencyId((String) rowData.get("agencyId"));
        user.setImei((String) rowData.get("imei"));
        user.setTeam((Integer) rowData.get("parent_user_id"));
        user.setIsPana((Integer) rowData.get("isPana"));
        user.setUserImagePath((String) rowData.get("Image_path"));
        user.setInsAppReq((Integer) rowData.get("insAppReq"));
        user.setIsAWS((Integer) rowData.get("is_aws"));
        user.setIsDashRpt((Integer) rowData.get("dash_report"));
        user.setImgRes((Integer) rowData.get("img_res"));
        user.setImgQly((Integer) rowData.get("img_qly"));
        user.setGeoFenceReq((Integer) rowData.get("geo_fence_req"));
        user.setSpoc((String) rowData.get("spoc"));
        return user;
    }
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.dao.DataAccessException;
import java.util.Map;

@Component
public class UserDao {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public UserForm authenticate(UserForm user) {
        try {
            String sql;

            // Get latest APK Version and Path
            sql = "q1"; // use your actual SQL here
            Map<String, Object> apkInfo = jdbcTemplate.queryForMap(sql);
            int latestApkVer = (Integer) apkInfo.get("APKVersion");
            String apkPath = (String) apkInfo.get("APKPath");

            // Check user's credentials
            sql = "q2"; // use your actual SQL here
            Map<String, Object> userInfo = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());

            // Process user's credentials
            if (userInfo != null) {
                user.setUserId((String) userInfo.get("USER_ID"));
                // ... (set other fields as before)
                if ((Integer) userInfo.get("apk_upgrade_req") == 1) {
                    user.setApkVersion(latestApkVer);
                    user.setApkPath(apkPath);
                } else {
                    user.setApkVersion(0);
                }
                // ... (set other fields as before)
            } else {
                // Attempt other logic
                sql = "q3"; // use your actual SQL here
                userInfo = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());
                if (userInfo != null) {
                    // ...(populate user info)
                } else {
                    // ... process failed login, update login tries etc.
                }
            }

        } catch (DataAccessException e) {
            e.printStackTrace();
            user = null;
        }
        return user;
    }
}
package com.yourpackage.repository;

import com.yourpackage.domain.UserForm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.dao.DataAccessException;
import java.util.Map;

@Repository
public class UserRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public UserForm authenticate(UserForm user) {
        try {
            String sql;

            // Get latest APK Version and Path
            sql = "q1"; // Replace with your actual SQL query
            Map<String, Object> apkInfo = jdbcTemplate.queryForMap(sql);
            int latestApkVer = (Integer) apkInfo.get("APKVersion");
            String apkPath = (String) apkInfo.get("APKPath");

            // Check user's credentials
            sql = "q2"; // Replace with your actual SQL query
            Map<String, Object> userInfo = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());

            // Process user's credentials
            if (userInfo != null) {
                user.setUserId((String) userInfo.get("USER_ID"));
                user.setUserType((String) userInfo.get("USER_TYPE"));
                // ... (set other fields similar to original method)

                if ((Integer) userInfo.get("apk_upgrade_req") == 1) {
                    user.setApkVersion(latestApkVer);
                    user.setApkPath(apkPath);
                } else {
                    user.setApkVersion(0);
                }

                // ... (set other fields similar to original method)

            } else {
                // Attempt other logic
                sql = "q3"; // Replace with your actual SQL query
                userInfo = jdbcTemplate.queryForMap(sql, user.getUserPassword(), user.getUserName());
                if (userInfo != null) {
                    user.setSpoc((String) userInfo.get("spoc"));
                    // ...(populate user info)
                } else {
                    // ... process failed login, update login tries etc.
                    int pinCnt = 1;
                    sql = "q4"; // Replace with your actual SQL query
                    Map<String, Object> failedLoginInfo = jdbcTemplate.queryForMap(sql, user.getUserName());
                    if (failedLoginInfo != null) {
                        pinCnt = (Integer) failedLoginInfo.get("pinCount");
                        user.setIsLoggedIn((String) failedLoginInfo.get("isLoggedIn"));
                    }
                    setLoginTries(user.getUserId(), (pinCnt + 1), "L");
                }
            }

        } catch (DataAccessException e) {
            e.printStackTrace();
            user = null;
        }
        return user;
    }

    private void setLoginTries(String userId, int pinCnt, String status) {
        // This method can also use jdbcTemplate to update login tries, similar to the above usage.
        // Note: It's best to have the SQL queries as constants or externalized in property files.
    }
}

