public boolean trackMasterNotPresent(String trackid) {
        String sql = "SELECT TRACK_ID FROM TRACK_MASTER WHERE TRACK_ID = ?";
        try {
            String result = jdbcTemplate.queryForObject(sql, new Object[]{trackid}, String.class);
            return result == null;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
 public void updateAccompanyData(AccompanyData accompanyData) {
        if (accompanyData.getAccSt() == null && accompanyData.getAccId() == 1) {
            String lastCallStTimeSql = "select start_time from h2h_main where track_id = ?";
            String lastCallStTime = jdbcTemplate.queryForObject(
                    lastCallStTimeSql,
                    new Object[]{accompanyData.getTrackId()},
                    String.class
            );

            String lctd = "00:00:00";

            if (!StringUtils.isEmpty(lastCallStTime)) {
                String currCallStTimeSql = "select TIMEDIFF(STR_TO_DATE(?, '%d-%b-%Y %H:%i:%s'), ?)";
                lctd = jdbcTemplate.queryForObject(
                        currCallStTimeSql,
                        new Object[]{accompanyData.getGeoTimeStamp(), lastCallStTime},
                        String.class
                );
            }

            accompanyData.setLastCallDur(lctd);
        }
    }
@Configuration
@EnableTransactionManagement
public class TransactionConfig {

    @Autowired
    private DataSource dataSource;

    @Bean
    public PlatformTransactionManager transactionManager() {
        return new DataSourceTransactionManager(dataSource);
    }
}
 public boolean isGeoFenceReq(String trackId) {
        String sql = "select geo_fence_req from user_master where user_id = ?";
        try {
            Integer flag = jdbcTemplate.queryForObject(
                    sql,
                    new Object[]{trackId.substring(12)},
                    Integer.class
            );
            return (flag != null && flag != 0);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
public int getSupIdByStartCall(String trackId) {
        String sql = "select supervisor_id from h2h_main where track_id = ?";
        try {
            Integer supervisorId = jdbcTemplate.queryForObject(
                    sql,
                    new Object[]{trackId},
                    Integer.class
            );
            return (supervisorId != null) ? supervisorId : 0;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
 public int getProperBId(String tId) {
        String brSql = "select brand from h2h_main where track_id = ?";
        try {
            Integer brId = jdbcTemplate.queryForObject(
                    brSql,
                    new Object[]{tId},
                    Integer.class
            );
            
            if (brId != null && brId > -1) {
                System.out.println(tId + ">>>>Brand Id is:::" + brId);
                return brId;
            } else {
                System.out.println(tId + ">>>>Brand Id is -1");
                return 18;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }
 public boolean accompanyDataNotPresent(AccompanyData fuldata) {
        String sql = "SELECT * FROM accompany_call WHERE TRACK_ID = ? and ACCOMPANY_ID = ? and BRAND_ID = ?";
        try {
            RowMapper<Object> rowMapper = (rs, rowNum) -> null; // We don't need to process the result, just check existence
            Object result = jdbcTemplate.queryForObject(
                    sql,
                    new Object[]{fuldata.getTrackId(), fuldata.getAccId(), fuldata.getBrandId()},
                    rowMapper
            );
            return result == null;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
if ((accompanyData.getMachineType() != null && !accompanyData.getMachineType().isEmpty()) ||
    (accompanyData.getUserType() != null && !accompanyData.getUserType().isEmpty())) {

    String level = "insert into machine_userlevel_type (track_id, accompany_id, brand, level, type, load_type) values (?, ?, ?, ?, ?, ?)";

    String levelType = null;
    String type = null;
    String loadType = null;

    if (accompanyData.getMachineType() != null && !accompanyData.getMachineType().isEmpty()) {
        levelType = "Machine Type";
        type = accompanyData.getMachineType();
        if ("Fully Automatic Machine".equals(accompanyData.getMachineType())) {
            loadType = accompanyData.getWashingMachineType();
        } else {
            loadType = null;
        }
    } else if (accompanyData.getUserType() != null && !accompanyData.getUserType().isEmpty()) {
        levelType = "User Type";
        type = accompanyData.getUserType();
        loadType = null;
    }

    jdbcTemplate.update(level, accompanyData.getTrackId(), accompanyData.getAccId(),
            accompanyData.getBrandId(), levelType, type, loadType);
}
private String getBrandsForReport(String configName) {
    String sql = "select config_value from configdata where config_name = ?";
    
    try {
        return jdbcTemplate.queryForObject(sql, new Object[]{configName}, String.class);
    } catch (Exception e) {
        e.printStackTrace();
        return "";
    }
 if (brandArray != null) {
        for (String brand : brandArray) {
            if (brand.equals(configDataUtil.getDBConfigValues("Kissan_brandid"))) {
                // kissan ketchup or Domex user
                if (accompanyData.getKetchupUser() == 1) {
                    String sql = "insert into brand_type(track_id, accompany_id, brand_id,brand_type_id,brand_type_name) values (?,?,?,?,?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), accompanyData.getKetchupId(), accompanyData.getKetchup());
                    System.out.println("kissan user----" + sql);
                }
                // not a kissan ketchup or Domex user
                else if (accompanyData.getKetchupUser() == 2) {
                    String sql = "insert into brand_type(track_id, accompany_id, brand_id,brand_type_id,brand_type_name) values (?,?,?,?,?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), 0, null);
                    System.out.println("not a kisaan user----" + sql);
                }
            }
        }
    }
if (brandArray != null && !brands.equals("")) {
        for (String brand : brandArray) {
            if (brand.equals(configDataUtil.getDBConfigValues("Kissan_brandid"))) {
                // Kissan ketchup or Domex user
                if (accompanyData.getKetchupUser() == 1) {
                    String sql = "insert into brand_type(track_id, accompany_id, brand_id, brand_type_id, brand_type_name) values (?, ?, ?, ?, ?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), accompanyData.getKetchupId(), accompanyData.getKetchup());
                }
                // Not a Kissan ketchup or Domex user
                else if (accompanyData.getKetchupUser() == 2) {
                    String sql = "insert into brand_type(track_id, accompany_id, brand_id, brand_type_id, brand_type_name) values (?, ?, ?, ?, ?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), 0, null);
                }
            }
            if (brand.equals(configDataUtil.getDBConfigValues("Domex_brandid"))) {
                if (accompanyData.getBrandId() == Integer.parseInt(configDataUtil.getDBConfigValues("Domex_brandid"))) {
                    String sql = "insert into brand_type(track_id, accompany_id, brand_id, brand_type_id, brand_type_name) values (?, ?, ?, ?, ?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), accompanyData.getDomexId(), accompanyData.getDomex());
                }
            }
            if (brand.equals(configDataUtil.getDBConfigValues("CoreHorlicks_brandid"))) {
                if (accompanyData.getBrandId() == Integer.parseInt(configDataUtil.getDBConfigValues("CoreHorlicks_brandid"))) {
                    String sql = "insert into corehorlicks_age(track_id, accompany_id, brand_id, variant_sold, ageGroup) values (?, ?, ?, ?, ?)";
                    jdbcTemplate.update(sql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getBrandId(), accompanyData.getVariantSold(), accompanyData.getCoreHorlicksAge());
                }
            }
        }
    }
if (accompanyData.getAdhocVal() != null) {
        String adhocSql = "insert into promoter_on_call_adhoc(track_id, accompany_id, adhocVal) values (?, ?, ?)";
        jdbcTemplate.update(adhocSql, accompanyData.getTrackId(), accompanyData.getAccId(), accompanyData.getAdhocVal());
    }
 public String savePhotoData(ArrayList<PhotoData> photoDataList) {

        if (photoDataList != null) {

            String sql = "INSERT into track_fieldphoto_table(track_id, phototype_id, lattitude, longitude, cellLatitude, cellLongitude, "
                    + "imageDateTime, user_id, image_path, brand_id, accompany_id, loc_accu) "
                    + "Values(?,?,?,?,?,?,?,?,?,?,?,?)";

            try {

                jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
                    @Override
                    public void setValues(PreparedStatement pstmt, int i) throws SQLException {
                        PhotoData photo = photoDataList.get(i);
                        pstmt.setString(1, photo.getTrackId());
                        pstmt.setInt(2, photo.getPhotoTypeId());
                        pstmt.setString(3, photo.getLatitude());
                        pstmt.setString(4, photo.getLongitude());
                        pstmt.setString(5, photo.getCellLatitude());
                        pstmt.setString(6, photo.getCellLongitude());
                        pstmt.setString(7, photo.getImageDateTime());
                        pstmt.setInt(8, photo.getUserId());
                        pstmt.setString(9, "images/" + photo.getTrackId() + "/" + photo.getImageName());
                        pstmt.setInt(10, photo.getBrandId());
                        pstmt.setInt(11, photo.getAccId());
                        pstmt.setString(12, photo.getLocationAccuracy());
                    }

                    @Override
                    public int getBatchSize() {
                        return photoDataList.size();
                    }
                });

                addImageQuality(photoDataList);

            } catch (Exception e) {
                e.printStackTrace();
                return "Failure";
            }

        } else {
            return "Failure";
        }

        return "success";
    }
 public String addImageQuality(ArrayList<PhotoData> photoDataList) {

        if (photoDataList != null) {

            String sql = "INSERT into h2h_schema.oncall_imageauto(track_id, acc_id, phototype_id, dark, blur) "
                    + "Values(?,?,?,?,?)";

            try {

                jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
                    @Override
                    public void setValues(PreparedStatement pstmt, int i) throws SQLException {
                        PhotoData photo = photoDataList.get(i);
                        if ((photo.getPhotoTypeId() >= 700 && photo.getPhotoTypeId() <= 799)
                                || (photo.getPhotoTypeId() >= 1000 && photo.getPhotoTypeId() <= 1099)) {
                            pstmt.setString(1, photo.getTrackId());
                            pstmt.setInt(2, photo.getAccId());
                            pstmt.setInt(3, photo.getPhotoTypeId());
                            pstmt.setInt(4, photo.getDark());
                            pstmt.setInt(5, photo.getBlurry());
                        }
                    }

                    @Override
                    public int getBatchSize() {
                        return photoDataList.size();
                    }
                });

            } catch (Exception e) {
                e.printStackTrace();
                return "Failure";
            }

        } else {
            return "Failure";
        }

        return "success";
    }
 public String validateSMSCode(String trackId, String lctd, int userId, String accSt, ArrayList<SmsCodeData> smsList) {
        try {
            int zaccId = -1, zuserId = -1;
            String zTrackId = "", zPhoneNo = "";
            lctd = (lctd == null ? "00:00:00" : lctd);
            int ON_CALL_TIME_DIFF = Integer.parseInt(ContextUtil.getDBConfigValues("on_call_time_diff"));
            Calendar c = Calendar.getInstance();
            c.setTime(new SimpleDateFormat("HH:mm:ss").parse(lctd));

            String sql = "INSERT INTO PROMOTER_SMS(TRACK_ID, Accompany_Id, Promoter_Code, SMS_Code, Name, Details, brand_id, is_validated, phoneNo, variantSold, opt_in) "
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            if (smsList != null) {
                for (SmsCodeData smsData : smsList) {
                    // ... Same logic in the original code for setting the values in the insert statement ...
                    // ... It's a bit long, so let's assume you are just copying that over ...
                    jdbcTemplate.update(sql, ps -> {
                        ps.setString(1, trackId);
                        ps.setInt(2, smsData.getAccCallId());
                        ps.setString(3, smsData.getPromoCode());
                        ps.setString(4, smsData.getSmsCode());
                        ps.setString(5, smsData.getConsName());
                        ps.setString(6, smsData.getConsFlat());
                        ps.setInt(7, smsData.getBrandId());
                        ps.setString(8, isValid);
                        ps.setString(9, (zPhoneNo != null && zPhoneNo.length() > 10) ? zPhoneNo.substring(2) : zPhoneNo);
                        ps.setString(10, smsData.getVariant());
                        ps.setInt(11, smsData.getOptIn());
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "Failure";
        }
        return "success";
    }
 public List<Map<String, Object>> getSMSStatus(String smsCode, String trackDate) {
        String sql = "SELECT generated_date, validated, track_Id, acc_id, user_id, mobile_no FROM zipdial_codes WHERE sms_code = ? AND generated_date = ?";

        return jdbcTemplate.query(sql, new Object[]{smsCode, trackDate}, new SMSStatusRowMapper());
    }

    private static class SMSStatusRowMapper implements RowMapper<Map<String, Object>> {

        @Override
        public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
            Map<String, Object> hmap = new HashMap<>();
            String formattedGenDate = DateBean.getFormattedDateYMD(rs.getDate("generated_date")); // Assuming DateBean has such a static method
            hmap.put("genDate", formattedGenDate);
            hmap.put("smsStatus", rs.getString("validated"));
            hmap.put("trackId", rs.getString("track_Id"));
            hmap.put("accId", rs.getInt("acc_id"));
            hmap.put("userId", rs.getInt("user_id"));
            hmap.put("phoneNo", rs.getString("mobile_no"));
            return hmap;
        }
    }
 public boolean checkDuplicateInThreshold(String smsCode, String trackDate) {
        String sql = "SELECT is_validated FROM promoter_sms ps " +
                     "INNER JOIN track_master tm ON ps.track_id = tm.track_id AND tm.track_date = DATE(?) " +
                     "WHERE sms_code = ? AND is_validated IN ('Y', 'Y-R')";

        // Query for a list of String values. If the list is not empty, it means that duplicate entries are present.
        List<String> results = jdbcTemplate.queryForList(sql, new Object[]{trackDate, smsCode}, String.class);

        return !results.isEmpty();
    }
